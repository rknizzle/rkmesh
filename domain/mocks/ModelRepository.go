// Code generated by mockery v2.3.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/rknizzle/rkmesh/domain"
	mock "github.com/stretchr/testify/mock"
)

// ModelRepository is an autogenerated mock type for the ModelRepository type
type ModelRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *ModelRepository) Delete(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllUserModels provides a mock function with given fields: ctx, userID
func (_m *ModelRepository) GetAllUserModels(ctx context.Context, userID int64) ([]domain.Model, error) {
	ret := _m.Called(ctx, userID)

	var r0 []domain.Model
	if rf, ok := ret.Get(0).(func(context.Context, int64) []domain.Model); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Model)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id, userID
func (_m *ModelRepository) GetByID(ctx context.Context, id int64, userID int64) (domain.Model, error) {
	ret := _m.Called(ctx, id, userID)

	var r0 domain.Model
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) domain.Model); ok {
		r0 = rf(ctx, id, userID)
	} else {
		r0 = ret.Get(0).(domain.Model)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, id, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByName provides a mock function with given fields: ctx, name
func (_m *ModelRepository) GetByName(ctx context.Context, name string) (domain.Model, error) {
	ret := _m.Called(ctx, name)

	var r0 domain.Model
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Model); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(domain.Model)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, m
func (_m *ModelRepository) Store(ctx context.Context, m *domain.Model) error {
	ret := _m.Called(ctx, m)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Model) error); ok {
		r0 = rf(ctx, m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
